name: CI/CD Pipeline

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Image version tag (overrides VERSION file if provided)'
        required: false

env:
  PHP_VERSION: '8.4'
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # ----- CI Jobs -----
  phpstan:
    name: PHPStan
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_pgsql
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Run PHPStan
        run: composer phpstan

  cs-check:
    name: PHP CS Fixer
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
      PHP_CS_FIXER_IGNORE_ENV: 1
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_pgsql
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Run PHP CS Fixer (Dry Run)
        run: composer cs-check

  phpmd:
    name: PHPMD
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_pgsql
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Run PHPMD
        run: composer phpmd

  lint-twig:
    name: Lint Twig Templates
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_pgsql
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Run Twig Lint
        run: php bin/console lint:twig templates

  lint-yaml:
    name: Lint YAML Files
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup PHP
        id: setup-php
        uses: shivammathur/setup-php@v2
        with:
          php-version: ${{ env.PHP_VERSION }}
          extensions: mbstring, xml, ctype, iconv, intl, zip, pdo, pdo_pgsql
          coverage: none
          tools: composer:v2

      - name: Get composer cache directory
        id: composer-cache
        run: echo "dir=$(composer config cache-files-dir)" >> $GITHUB_OUTPUT

      - name: Cache composer dependencies
        uses: actions/cache@v4
        with:
          path: ${{ steps.composer-cache.outputs.dir }}
          key: ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-${{ hashFiles('**/composer.lock') }}
          restore-keys: |
            ${{ runner.os }}-php-${{ env.PHP_VERSION }}-composer-
            ${{ runner.os }}-php-

      - name: Install Dependencies
        run: composer install --prefer-dist --no-progress --no-interaction --optimize-autoloader

      - name: Run YAML Lint
        run: php bin/console lint:yaml config --parse-tags

  security-check:
    name: Symfony Security Check
    runs-on: ubuntu-latest
    env:
      APP_ENV: test
    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Setup Symfony CLI
        uses: symfony/actions/setup-cli@v1

      - name: Run Symfony Security Check
        run: symfony check:security

  # ----- CD Jobs -----
  build-and-push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    needs: [ phpstan, cs-check, phpmd, lint-twig, lint-yaml, security-check ]
    permissions:
      contents: read
      packages: write

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract version
        id: version
        run: |
          if [ "${{ github.event_name }}" = "workflow_dispatch" ] && [ "${{ github.event.inputs.version }}" != "" ]; then
            echo "VERSION=${{ github.event.inputs.version }}" >> $GITHUB_OUTPUT
          elif [ -f VERSION ]; then
            VERSION_FROM_FILE=$(cat VERSION)
            echo "VERSION=${VERSION_FROM_FILE}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=latest" >> $GITHUB_OUTPUT
          fi
          echo "Using version: ${{ steps.version.outputs.VERSION }}"

      - name: Set Docker tags
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest,enable=${{ steps.version.outputs.VERSION != 'latest' }}
            type=raw,value=${{ steps.version.outputs.VERSION }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          build-args: |
            APP_ENV=prod
